// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.ACC.DataConnector.DataConnector.V1.Accounts.Item.Jobs.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithJobGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The account ID.</summary>
        public Guid? AccountId { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The date and time the job was completed, presented in ISO 8601 format. If the job has not yet completed, the value is null.</summary>
        public DateTimeOffset? CompletedAt { get; set; }
        /// <summary>The completion status for completed jobs. Possible values: ``success``, ``failed``, ``cancelled``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompletionStatus { get; set; }
#nullable restore
#else
        public string CompletionStatus { get; set; }
#endif
        /// <summary>The date and time the job was created, presented in ISO 8601 format.</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>The BIM 360 / ACC user ID of the user who created the data request that spawned this job.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedBy { get; set; }
#nullable restore
#else
        public string CreatedBy { get; set; }
#endif
        /// <summary>The email address of the user who created the data request that spawned this job.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedByEmail { get; set; }
#nullable restore
#else
        public string CreatedByEmail { get; set; }
#endif
        /// <summary>The end date and time for the data extraction, in ISO 8601 format.This field applies only to schemas that support date range extraction. The detailed schema documentation delivered with each data extract identifies the schemas and tables that support date range extraction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EndDate { get; set; }
#nullable restore
#else
        public string EndDate { get; set; }
#endif
        /// <summary>The job ID.</summary>
        public Guid? Id { get; set; }
        /// <summary>The last date and time that a user downloaded this job data, in ISO 8601 format.</summary>
        public DateTimeOffset? LastDownloadedAt { get; set; }
        /// <summary>The ID of the user who last downloaded this job data.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastDownloadedBy { get; set; }
#nullable restore
#else
        public string LastDownloadedBy { get; set; }
#endif
        /// <summary>Job progress indicator (0 to 100 percent)</summary>
        public int? Progress { get; set; }
        /// <summary>The project ID.</summary>
        public Guid? ProjectId { get; set; }
        /// <summary>The list of project IDs</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ProjectIdList { get; set; }
#nullable restore
#else
        public List<string> ProjectIdList { get; set; }
#endif
        /// <summary>The ID of the data request that spawned the job.</summary>
        public Guid? RequestId { get; set; }
        /// <summary>Send a notification email when the job completes.</summary>
        public bool? SendEmail { get; set; }
        /// <summary>The start date and time for the data extraction, in ISO 8601 format.This field applies only to schemas that support date range extraction. The detailed schema documentation delivered with each data extract identifies the schemas and tables that support date range extraction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StartDate { get; set; }
#nullable restore
#else
        public string StartDate { get; set; }
#endif
        /// <summary>The date and time the job was started, presented in ISO 8601 format. If the job has not yet started, the value is null.</summary>
        public DateTimeOffset? StartedAt { get; set; }
        /// <summary>The current status of the job. Possible values: ``queued``, ``running``, ``complete``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ACC.DataConnector.DataConnector.V1.Accounts.Item.Jobs.Item.WithJobGetResponse"/> and sets the default values.
        /// </summary>
        public WithJobGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.DataConnector.DataConnector.V1.Accounts.Item.Jobs.Item.WithJobGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.ACC.DataConnector.DataConnector.V1.Accounts.Item.Jobs.Item.WithJobGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.ACC.DataConnector.DataConnector.V1.Accounts.Item.Jobs.Item.WithJobGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accountId", n => { AccountId = n.GetGuidValue(); } },
                { "completedAt", n => { CompletedAt = n.GetDateTimeOffsetValue(); } },
                { "completionStatus", n => { CompletionStatus = n.GetStringValue(); } },
                { "createdAt", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "createdBy", n => { CreatedBy = n.GetStringValue(); } },
                { "createdByEmail", n => { CreatedByEmail = n.GetStringValue(); } },
                { "endDate", n => { EndDate = n.GetStringValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "lastDownloadedAt", n => { LastDownloadedAt = n.GetDateTimeOffsetValue(); } },
                { "lastDownloadedBy", n => { LastDownloadedBy = n.GetStringValue(); } },
                { "progress", n => { Progress = n.GetIntValue(); } },
                { "projectId", n => { ProjectId = n.GetGuidValue(); } },
                { "projectIdList", n => { ProjectIdList = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "requestId", n => { RequestId = n.GetGuidValue(); } },
                { "sendEmail", n => { SendEmail = n.GetBoolValue(); } },
                { "startDate", n => { StartDate = n.GetStringValue(); } },
                { "startedAt", n => { StartedAt = n.GetDateTimeOffsetValue(); } },
                { "status", n => { Status = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteGuidValue("accountId", AccountId);
            writer.WriteDateTimeOffsetValue("completedAt", CompletedAt);
            writer.WriteStringValue("completionStatus", CompletionStatus);
            writer.WriteDateTimeOffsetValue("createdAt", CreatedAt);
            writer.WriteStringValue("createdBy", CreatedBy);
            writer.WriteStringValue("createdByEmail", CreatedByEmail);
            writer.WriteStringValue("endDate", EndDate);
            writer.WriteGuidValue("id", Id);
            writer.WriteDateTimeOffsetValue("lastDownloadedAt", LastDownloadedAt);
            writer.WriteStringValue("lastDownloadedBy", LastDownloadedBy);
            writer.WriteIntValue("progress", Progress);
            writer.WriteGuidValue("projectId", ProjectId);
            writer.WriteCollectionOfPrimitiveValues<string>("projectIdList", ProjectIdList);
            writer.WriteGuidValue("requestId", RequestId);
            writer.WriteBoolValue("sendEmail", SendEmail);
            writer.WriteStringValue("startDate", StartDate);
            writer.WriteDateTimeOffsetValue("startedAt", StartedAt);
            writer.WriteStringValue("status", Status);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
