// <auto-generated/>
#pragma warning disable CS0618
using Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Import;
using Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item;
using Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Search;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies
{
    /// <summary>
    /// Builds and executes requests for operations under \hq\v1\accounts\{account_id}\companies
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class CompaniesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The import property</summary>
        public global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Import.ImportRequestBuilder Import
        {
            get => new global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Import.ImportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The search property</summary>
        public global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Search.SearchRequestBuilder Search
        {
            get => new global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Search.SearchRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Autodesk.ACC.AccountAdmin.hq.v1.accounts.item.companies.item collection</summary>
        /// <param name="position">Company ID</param>
        /// <returns>A <see cref="global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_ItemRequestBuilder"/></returns>
        public global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_ItemRequestBuilder this[Guid position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("company_id", position);
                return new global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the Autodesk.ACC.AccountAdmin.hq.v1.accounts.item.companies.item collection</summary>
        /// <param name="position">Company ID</param>
        /// <returns>A <see cref="global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_ItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_ItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("company_id", position);
                return new global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CompaniesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/hq/v1/accounts/{account_id}/companies{?field*,limit*,offset*,sort*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CompaniesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/hq/v1/accounts/{account_id}/companies{?field*,limit*,offset*,sort*}", rawUrl)
        {
        }
        /// <summary>
        /// Query all the partner companies in a specific BIM 360 account.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesGetResponse?> GetAsCompaniesGetResponseAsync(Action<RequestConfiguration<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesRequestBuilder.CompaniesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesGetResponse> GetAsCompaniesGetResponseAsync(Action<RequestConfiguration<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesRequestBuilder.CompaniesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesGetResponse>(requestInfo, global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Query all the partner companies in a specific BIM 360 account.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsCompaniesGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesResponse?> GetAsync(Action<RequestConfiguration<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesRequestBuilder.CompaniesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesResponse> GetAsync(Action<RequestConfiguration<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesRequestBuilder.CompaniesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesResponse>(requestInfo, global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Create a new partner company.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesPostResponse?> PostAsCompaniesPostResponseAsync(global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesPostResponse> PostAsCompaniesPostResponseAsync(global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesPostResponse>(requestInfo, global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesPostResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Create a new partner company.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use PostAsCompaniesPostResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesResponse?> PostAsync(global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesResponse> PostAsync(global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesResponse>(requestInfo, global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Query all the partner companies in a specific BIM 360 account.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesRequestBuilder.CompaniesRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesRequestBuilder.CompaniesRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Create a new partner company.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Query all the partner companies in a specific BIM 360 account.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CompaniesRequestBuilderGetQueryParameters 
        {
            /// <summary>| Comma-separated fields to include in response|| ``id`` will always be returned| Invalid fields will be ignored</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("field")]
            public string? Field { get; set; }
#nullable restore
#else
            [QueryParameter("field")]
            public string Field { get; set; }
#endif
            /// <summary>| Response array&apos;s size| Default value: ``10``| Max limit: ``100``</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
            /// <summary>| Offset of response array| Default value: ``0``</summary>
            [QueryParameter("offset")]
            public int? Offset { get; set; }
            /// <summary>| Comma-separated fields to sort by in ascending order|| Prepending a field with ``-`` sorts in descending order| Invalid fields and whitespaces will be ignored</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sort")]
            public string? Sort { get; set; }
#nullable restore
#else
            [QueryParameter("sort")]
            public string Sort { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CompaniesRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.CompaniesRequestBuilder.CompaniesRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CompaniesRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
