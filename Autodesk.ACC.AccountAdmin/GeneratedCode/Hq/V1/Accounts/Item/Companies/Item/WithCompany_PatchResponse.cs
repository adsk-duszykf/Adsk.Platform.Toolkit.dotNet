// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithCompany_PatchResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Account ID</summary>
        public Guid? AccountId { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>| Company address line 1|| Max length: 255</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AddressLine1 { get; set; }
#nullable restore
#else
        public string AddressLine1 { get; set; }
#endif
        /// <summary>| Company address line 2|| Max length: 255</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AddressLine2 { get; set; }
#nullable restore
#else
        public string AddressLine2 { get; set; }
#endif
        /// <summary>| City in which company is located|| Max length: 255</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? City { get; set; }
#nullable restore
#else
        public string City { get; set; }
#endif
        /// <summary>| Country for this company|| Refer to the ``country`` list in the `Parameters &lt;/en/docs/bim360/v1/overview/parameters&gt;`_ guide.</summary>
        public global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_PatchResponse_country? Country { get; set; }
        /// <summary>| Short description or overview for company|| Max length: 255</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Used to associate a company in BIM 360 with the company data in an ERP system</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ErpId { get; set; }
#nullable restore
#else
        public string ErpId { get; set; }
#endif
        /// <summary>Company ID</summary>
        public Guid? Id { get; set; }
        /// <summary>| Company name should be unique under an account|| Max length: 255</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>| Business phone number for the company|| Max length: 255</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Phone { get; set; }
#nullable restore
#else
        public string Phone { get; set; }
#endif
        /// <summary>| Postal code for the company location|| Max length: 255</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PostalCode { get; set; }
#nullable restore
#else
        public string PostalCode { get; set; }
#endif
        /// <summary>| State or province in which company is located|| Max length: 255|| Note that the ``state_or_province`` value depends on the selected ``country`` value;see the valid values in the ``state_or_province`` list inthe `Parameters &lt;/en/docs/bim360/v1/overview/parameters&gt;`_ guide.</summary>
        public global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_PatchResponse_state_or_province? StateOrProvince { get; set; }
        /// <summary>Used to associate a company in BIM 360 with the company data from public and industry sources</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TaxId { get; set; }
#nullable restore
#else
        public string TaxId { get; set; }
#endif
        /// <summary>| Trade type based on specialization|| Refer to the ``trade`` list in the `Parameters &lt;/en/docs/bim360/v1/overview/parameters&gt;`_ guide.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Trade { get; set; }
#nullable restore
#else
        public string Trade { get; set; }
#endif
        /// <summary>| Company website|| Max length: 255</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WebsiteUrl { get; set; }
#nullable restore
#else
        public string WebsiteUrl { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_PatchResponse"/> and sets the default values.
        /// </summary>
        public WithCompany_PatchResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_PatchResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_PatchResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_PatchResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "account_id", n => { AccountId = n.GetGuidValue(); } },
                { "address_line_1", n => { AddressLine1 = n.GetStringValue(); } },
                { "address_line_2", n => { AddressLine2 = n.GetStringValue(); } },
                { "city", n => { City = n.GetStringValue(); } },
                { "country", n => { Country = n.GetEnumValue<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_PatchResponse_country>(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "erp_id", n => { ErpId = n.GetStringValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "phone", n => { Phone = n.GetStringValue(); } },
                { "postal_code", n => { PostalCode = n.GetStringValue(); } },
                { "state_or_province", n => { StateOrProvince = n.GetEnumValue<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_PatchResponse_state_or_province>(); } },
                { "tax_id", n => { TaxId = n.GetStringValue(); } },
                { "trade", n => { Trade = n.GetStringValue(); } },
                { "website_url", n => { WebsiteUrl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteGuidValue("account_id", AccountId);
            writer.WriteStringValue("address_line_1", AddressLine1);
            writer.WriteStringValue("address_line_2", AddressLine2);
            writer.WriteStringValue("city", City);
            writer.WriteEnumValue<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_PatchResponse_country>("country", Country);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("erp_id", ErpId);
            writer.WriteGuidValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("phone", Phone);
            writer.WriteStringValue("postal_code", PostalCode);
            writer.WriteEnumValue<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_PatchResponse_state_or_province>("state_or_province", StateOrProvince);
            writer.WriteStringValue("tax_id", TaxId);
            writer.WriteStringValue("trade", Trade);
            writer.WriteStringValue("website_url", WebsiteUrl);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
