// <auto-generated/>
#pragma warning disable CS0618
using Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.Image;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \hq\v1\accounts\{account_id}\companies\{company_id}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithCompany_ItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The image property</summary>
        public global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.Image.ImageRequestBuilder Image
        {
            get => new global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.Image.ImageRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_ItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithCompany_ItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/hq/v1/accounts/{account_id}/companies/{company_id}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_ItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithCompany_ItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/hq/v1/accounts/{account_id}/companies/{company_id}", rawUrl)
        {
        }
        /// <summary>
        /// Query the details of a specific partner company.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_GetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_GetResponse?> GetAsWithCompany_GetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_GetResponse> GetAsWithCompany_GetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_GetResponse>(requestInfo, global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_GetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Query the details of a specific partner company.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_Response"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsWithCompany_GetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_Response?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_Response> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_Response>(requestInfo, global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_Response.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Update the properties of only the specified attributes of a specific partner company.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_PatchResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_PatchResponse?> PatchAsWithCompany_PatchResponseAsync(global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_PatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_PatchResponse> PatchAsWithCompany_PatchResponseAsync(global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_PatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPatchRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_PatchResponse>(requestInfo, global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_PatchResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Update the properties of only the specified attributes of a specific partner company.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_Response"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use PatchAsWithCompany_PatchResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_Response?> PatchAsync(global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_PatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_Response> PatchAsync(global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_PatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPatchRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_Response>(requestInfo, global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_Response.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Query the details of a specific partner company.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Update the properties of only the specified attributes of a specific partner company.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_PatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_PatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_ItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_ItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Autodesk.ACC.AccountAdmin.Hq.V1.Accounts.Item.Companies.Item.WithCompany_ItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithCompany_ItemRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithCompany_ItemRequestBuilderPatchRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
