// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CompaniesGetResponse_results : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The identifier of the account this company is associated with.</summary>
        public Guid? AccountId { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The company addresses.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesGetResponse_results_addresses>? Addresses { get; set; }
#nullable restore
#else
        public List<global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesGetResponse_results_addresses> Addresses { get; set; }
#endif
        /// <summary>The timestamp when this company was created.</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>The description of the company.Max length: 255</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The ERP Partner Company ID.Max length: 255</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ErpId { get; set; }
#nullable restore
#else
        public string ErpId { get; set; }
#endif
        /// <summary>Id of the company.</summary>
        public Guid? Id { get; set; }
        /// <summary>The URL of the image associated to the company.Max length: 255</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ImageUrl { get; set; }
#nullable restore
#else
        public string ImageUrl { get; set; }
#endif
        /// <summary>The name of the company. The company name should be unique under an account.Max length: 255</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Original name of the company. Only returned when a company is deleted, since, in this case, the company ``name`` will be updated to ``removed at MMDDYYYY``.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalName { get; set; }
#nullable restore
#else
        public string OriginalName { get; set; }
#endif
        /// <summary>The number of projects associated with the company.</summary>
        public int? ProjectSize { get; set; }
        /// <summary>The status of the company.Possible values: ``deleted``, ``active``</summary>
        public global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesGetResponse_results_status? Status { get; set; }
        /// <summary>The Tax ID.Max length: 255</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TaxId { get; set; }
#nullable restore
#else
        public string TaxId { get; set; }
#endif
        /// <summary>Trade or company type based on specialization.Max length: 255</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Trade { get; set; }
#nullable restore
#else
        public string Trade { get; set; }
#endif
        /// <summary>The timestamp when this company was last updated. This will only reflect changes to the company fields and not changes to any resources in the company.</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>The number of users that are associated with the company.</summary>
        public int? UserSize { get; set; }
        /// <summary>The URL of the company website.Max length: 255</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WebsiteUrl { get; set; }
#nullable restore
#else
        public string WebsiteUrl { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesGetResponse_results"/> and sets the default values.
        /// </summary>
        public CompaniesGetResponse_results()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesGetResponse_results"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesGetResponse_results CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesGetResponse_results();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accountId", n => { AccountId = n.GetGuidValue(); } },
                { "addresses", n => { Addresses = n.GetCollectionOfObjectValues<global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesGetResponse_results_addresses>(global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesGetResponse_results_addresses.CreateFromDiscriminatorValue)?.AsList(); } },
                { "createdAt", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "erpId", n => { ErpId = n.GetStringValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "imageUrl", n => { ImageUrl = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "originalName", n => { OriginalName = n.GetStringValue(); } },
                { "projectSize", n => { ProjectSize = n.GetIntValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesGetResponse_results_status>(); } },
                { "taxId", n => { TaxId = n.GetStringValue(); } },
                { "trade", n => { Trade = n.GetStringValue(); } },
                { "updatedAt", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
                { "userSize", n => { UserSize = n.GetIntValue(); } },
                { "websiteUrl", n => { WebsiteUrl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteGuidValue("accountId", AccountId);
            writer.WriteCollectionOfObjectValues<global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesGetResponse_results_addresses>("addresses", Addresses);
            writer.WriteDateTimeOffsetValue("createdAt", CreatedAt);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("erpId", ErpId);
            writer.WriteGuidValue("id", Id);
            writer.WriteStringValue("imageUrl", ImageUrl);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("originalName", OriginalName);
            writer.WriteIntValue("projectSize", ProjectSize);
            writer.WriteEnumValue<global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesGetResponse_results_status>("status", Status);
            writer.WriteStringValue("taxId", TaxId);
            writer.WriteStringValue("trade", Trade);
            writer.WriteDateTimeOffsetValue("updatedAt", UpdatedAt);
            writer.WriteIntValue("userSize", UserSize);
            writer.WriteStringValue("websiteUrl", WebsiteUrl);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
