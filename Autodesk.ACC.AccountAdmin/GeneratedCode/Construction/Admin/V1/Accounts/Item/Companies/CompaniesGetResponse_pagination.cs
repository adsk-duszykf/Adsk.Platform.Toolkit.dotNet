// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies
{
    /// <summary>
    /// Contains pagination details for the records returned by the endpoint.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class CompaniesGetResponse_pagination : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The maximum number of records returned per page. The last page may contain fewer records than the specified limit.</summary>
        public int? Limit { get; set; }
        /// <summary>The URL for the next page of records, if more results are available. Max length: 2000 characters.Max length: 2000</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NextUrl { get; set; }
#nullable restore
#else
        public string NextUrl { get; set; }
#endif
        /// <summary>The index of the first record in the returned page. Used for pagination.</summary>
        public int? Offset { get; set; }
        /// <summary>The URL for the previous page of records, if applicable. Max length: 2000 characters.Max length: 2000</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviousUrl { get; set; }
#nullable restore
#else
        public string PreviousUrl { get; set; }
#endif
        /// <summary>The total number of records matching the request.</summary>
        public int? TotalResults { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesGetResponse_pagination"/> and sets the default values.
        /// </summary>
        public CompaniesGetResponse_pagination()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesGetResponse_pagination"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesGetResponse_pagination CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesGetResponse_pagination();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "limit", n => { Limit = n.GetIntValue(); } },
                { "nextUrl", n => { NextUrl = n.GetStringValue(); } },
                { "offset", n => { Offset = n.GetIntValue(); } },
                { "previousUrl", n => { PreviousUrl = n.GetStringValue(); } },
                { "totalResults", n => { TotalResults = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("limit", Limit);
            writer.WriteStringValue("nextUrl", NextUrl);
            writer.WriteIntValue("offset", Offset);
            writer.WriteStringValue("previousUrl", PreviousUrl);
            writer.WriteIntValue("totalResults", TotalResults);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
