// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies
{
    /// <summary>
    /// Builds and executes requests for operations under \construction\admin\v1\accounts\{accountId}\companies
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class CompaniesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CompaniesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/construction/admin/v1/accounts/{accountId}/companies{?fields*,filterTextMatch*,filter%5BerpId%5D*,filter%5Bname%5D*,filter%5BtaxId%5D*,filter%5Btrade%5D*,filter%5BupdatedAt%5D*,limit*,offset*,orFilters*,sort*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CompaniesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/construction/admin/v1/accounts/{accountId}/companies{?fields*,filterTextMatch*,filter%5BerpId%5D*,filter%5Bname%5D*,filter%5BtaxId%5D*,filter%5Btrade%5D*,filter%5BupdatedAt%5D*,limit*,offset*,orFilters*,sort*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of companies in an account.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesGetResponse?> GetAsCompaniesGetResponseAsync(Action<RequestConfiguration<global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesRequestBuilder.CompaniesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesGetResponse> GetAsCompaniesGetResponseAsync(Action<RequestConfiguration<global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesRequestBuilder.CompaniesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesGetResponse>(requestInfo, global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of companies in an account.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsCompaniesGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesResponse?> GetAsync(Action<RequestConfiguration<global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesRequestBuilder.CompaniesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesResponse> GetAsync(Action<RequestConfiguration<global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesRequestBuilder.CompaniesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesResponse>(requestInfo, global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of companies in an account.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesRequestBuilder.CompaniesRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesRequestBuilder.CompaniesRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of companies in an account.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CompaniesRequestBuilderGetQueryParameters 
        {
            /// <summary>List of fields to return in the response.  Defaults to all fields.  Valid list of fields are `accountId`, `name`, `trade`, `addresses`, `websiteUrl`, `description`, `erpId`, `taxId`, `imageUrl`, `status`, `createdAt`, `updatedAt`, `projectSize`, `userSize` and `originalName`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("fields")]
            public string[]? Fields { get; set; }
#nullable restore
#else
            [QueryParameter("fields")]
            public string[] Fields { get; set; }
#endif
            /// <summary>Filter companies by ERP Id.  Can be a partial match based on the value of `filterTextMatch` provided.Max length: 255</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BerpId%5D")]
            public string? FiltererpId { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BerpId%5D")]
            public string FiltererpId { get; set; }
#endif
            /// <summary>Filter companies by name.  Can be a partial match based on the value of `filterTextMatch` provided.Max length: 255</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Bname%5D")]
            public string? Filtername { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Bname%5D")]
            public string Filtername { get; set; }
#endif
            /// <summary>Filter companies by tax Id.  Can be a partial match based on the value of `filterTextMatch` provided.Max length: 255</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BtaxId%5D")]
            public string? FiltertaxId { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BtaxId%5D")]
            public string FiltertaxId { get; set; }
#endif
            /// <summary>Specifies how text-based filters should match values in supported fields.This parameter can be used in any endpoint that supports text-based filtering (e.g., ``filter[name]``, ``filter[jobNumber]``, ``filter[companyName]``, etc.).Possible values:``contains`` (default) – Matches if the field contains the specified text anywhere``startsWith`` – Matches if the field starts with the specified text``endsWith`` – Matches if the field ends with the specified text``equals`` – Matches only if the field exactly matches the specified textMatching is case-insensitive.Wildcards and regular expressions are not supported.</summary>
            [Obsolete("This property is deprecated, use FilterTextMatchAsGetFilterTextMatchQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filterTextMatch")]
            public string? FilterTextMatch { get; set; }
#nullable restore
#else
            [QueryParameter("filterTextMatch")]
            public string FilterTextMatch { get; set; }
#endif
            /// <summary>Specifies how text-based filters should match values in supported fields.This parameter can be used in any endpoint that supports text-based filtering (e.g., ``filter[name]``, ``filter[jobNumber]``, ``filter[companyName]``, etc.).Possible values:``contains`` (default) – Matches if the field contains the specified text anywhere``startsWith`` – Matches if the field starts with the specified text``endsWith`` – Matches if the field ends with the specified text``equals`` – Matches only if the field exactly matches the specified textMatching is case-insensitive.Wildcards and regular expressions are not supported.</summary>
            [QueryParameter("filterTextMatch")]
            public global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.GetFilterTextMatchQueryParameterType? FilterTextMatchAsGetFilterTextMatchQueryParameterType { get; set; }
            /// <summary>Filter companies by trade.  Can be a partial match based on the value of `filterTextMatch` provided.Max length: 255</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Btrade%5D")]
            public string? Filtertrade { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Btrade%5D")]
            public string Filtertrade { get; set; }
#endif
            /// <summary>Filter companies by updated at date range. The range must be specified with dates in an ISO-8601 format with time required.  The start and end dates of the range should be separated by `..`  One of the dates in the range may be omitted. For example, to get everything on or before June 1, 2019 the range would be `..2019-06-01T23:59:59.999Z`. To get everything after June 1, 2019 the range would be `2019-06-01T00:00:00.000Z..`.Max length: 100</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5BupdatedAt%5D")]
            public string? FilterupdatedAt { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5BupdatedAt%5D")]
            public string FilterupdatedAt { get; set; }
#endif
            /// <summary>The maximum number of records to return in the response.Default: ``20``Minimum: ``1``Maximum: ``200`` (If a larger value is provided, only 200 records are returned)</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
            /// <summary>The index of the first record to return.Used for pagination in combination with the ``limit`` parameter.Example: ``limit=20`` and ``offset=40`` returns records 41–60.</summary>
            [QueryParameter("offset")]
            public int? Offset { get; set; }
            /// <summary>List of filtered fields to apply an ``or`` operator. Valid list of fields are `erpId`, `name`, `taxId`, `trade`, `updatedAt`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("orFilters")]
            public string[]? OrFilters { get; set; }
#nullable restore
#else
            [QueryParameter("orFilters")]
            public string[] OrFilters { get; set; }
#endif
            /// <summary>The list of fields to sort by.  When multiple fields are listed the later property is used to sort the resources where the previous fields have the same value. Each property can be followed by a direction modifier of either `asc` (ascending) or `desc` (descending).  If no direction is specified then `asc` is assumed.  Valid fields for sorting are `name`, `trade`, `erpId`, `taxId`, `status`, `createdAt`, `updatedAt`, `projectSize` and `userSize`.  Default sort is `name`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sort")]
            public string[]? Sort { get; set; }
#nullable restore
#else
            [QueryParameter("sort")]
            public string[] Sort { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CompaniesRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Companies.CompaniesRequestBuilder.CompaniesRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
