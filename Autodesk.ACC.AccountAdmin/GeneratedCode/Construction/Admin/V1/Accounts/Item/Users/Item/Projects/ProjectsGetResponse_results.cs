// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Users.Item.Projects
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ProjectsGetResponse_results : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Information about the user’s access roles in the project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Users.Item.Projects.ProjectsGetResponse_results_accessLevels? AccessLevels { get; set; }
#nullable restore
#else
        public global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Users.Item.Projects.ProjectsGetResponse_results_accessLevels AccessLevels { get; set; }
#endif
        /// <summary>The account ID associated with the project.</summary>
        public Guid? AccountId { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The first line of the project’s address.Max length: 255</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AddressLine1 { get; set; }
#nullable restore
#else
        public string AddressLine1 { get; set; }
#endif
        /// <summary>Additional address details for the project location.Max length: 255</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AddressLine2 { get; set; }
#nullable restore
#else
        public string AddressLine2 { get; set; }
#endif
        /// <summary>The city wher the project is located.Max length: 255</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? City { get; set; }
#nullable restore
#else
        public string City { get; set; }
#endif
        /// <summary>The classification of the project. Possible values:- ``production`` – Standard project.- ``template`` – A project that serves as a template for creating new projects.- ``component`` – A placeholder project containing reusable components (e.g., forms). Only one component project is allowed per account. Known as a library in the ACC UI.- ``sample`` – A single sample project automatically created for ACC trials (limited to one per account).</summary>
        public global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Users.Item.Projects.ProjectsGetResponse_results_classification? Classification { get; set; }
        /// <summary>The type of construction for the project. Recommended values: ``New Construction``, ``Renovation``. Any value is accepted.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConstructionType { get; set; }
#nullable restore
#else
        public string ConstructionType { get; set; }
#endif
        /// <summary>The type of contract for the project. For example, ``Lump Sum``, ``Cost Plus``, ``Guaranteed Maximum Price``, ``Unit Price``. Any value is accepted.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContractType { get; set; }
#nullable restore
#else
        public string ContractType { get; set; }
#endif
        /// <summary>The country where the project is located, using an ISO 3166-1 code.Max length: 255</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Country { get; set; }
#nullable restore
#else
        public string Country { get; set; }
#endif
        /// <summary>The timestamp when the project was created, in ISO 8601 format. This value is set at creation and does not change.</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>The current phase of the project. Recommended values include, ``Concept``, ``Design``, ``Bidding``, ``Planning``, ``Preconstruction``, ``Construction``, ``Commissioning``, ``Warranty``, ``Complete``, ``Facility Management``, ``Operation``, ``Strategic Definition``, ``Preparation and Brief``, ``Concept Design``, ``Developed Design``, ``Technical Design``, ``Construction``, ``Handover and Close Out`` and ``In Use``.Any value is accepted.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CurrentPhase { get; set; }
#nullable restore
#else
        public string CurrentPhase { get; set; }
#endif
        /// <summary>The method used to deliver the project. Recommended values include ``Design-Bid-Build``, ``Construction Management (CM) at Risk``, and ``Integrated Project Delivery (IPD)``. Any value is accepted.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeliveryMethod { get; set; }
#nullable restore
#else
        public string DeliveryMethod { get; set; }
#endif
        /// <summary>The estimated end date for the project, in ISO 8601 format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EndDate { get; set; }
#nullable restore
#else
        public string EndDate { get; set; }
#endif
        /// <summary>The internally generated ID for the project.</summary>
        public Guid? Id { get; set; }
        /// <summary>The URL of the main image associated with the project. This field can be ``null``.Max length: 255</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ImageUrl { get; set; }
#nullable restore
#else
        public string ImageUrl { get; set; }
#endif
        /// <summary>A user-defined identifier for the project. This value is assigned when the project is created and can be used to filter projects. It supports partial matches when used with ``filterTextMatch``.Max length: 100</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JobNumber { get; set; }
#nullable restore
#else
        public string JobNumber { get; set; }
#endif
        /// <summary>The latitude coordinate of the project location.Max length: 25</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Latitude { get; set; }
#nullable restore
#else
        public string Latitude { get; set; }
#endif
        /// <summary>The longitude coordinate of the project location.Max length: 25</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Longitude { get; set; }
#nullable restore
#else
        public string Longitude { get; set; }
#endif
        /// <summary>The name of the project.Max length: 255</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The APS platform where the project is stored. Possible values: ``acc``, ``bim360``.Note that this field is relevant only in responses. It is ignored in requests.</summary>
        public global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Users.Item.Projects.ProjectsGetResponse_results_platform? Platform { get; set; }
        /// <summary>The postal or ZIP code of the project location.Max length: 255</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PostalCode { get; set; }
#nullable restore
#else
        public string PostalCode { get; set; }
#endif
        /// <summary>Contains details about the estimated cost of the project, including the amount (``value``) and the currency (``currency``).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Users.Item.Projects.ProjectsGetResponse_results_projectValue? ProjectValue { get; set; }
#nullable restore
#else
        public global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Users.Item.Projects.ProjectsGetResponse_results_projectValue ProjectValue { get; set; }
#endif
        /// <summary>The total number of sheets associated with the project.Note that this field is relevant only in responses. It is ignored in requests.</summary>
        public int? SheetCount { get; set; }
        /// <summary>The estimated start date for the project, in ISO 8601 format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StartDate { get; set; }
#nullable restore
#else
        public string StartDate { get; set; }
#endif
        /// <summary>The state or province where the project is located. It must be a valid name or an ISO 3166-2 code. The provided state or province must exist in the country of the project.Max length: 255</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StateOrProvince { get; set; }
#nullable restore
#else
        public string StateOrProvince { get; set; }
#endif
        /// <summary>The status of the project.Possible values: ``active``, ``pending``, ``archived`` and ``suspended``.</summary>
        public global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Users.Item.Projects.ProjectsGetResponse_results_status? Status { get; set; }
        /// <summary>The URL of the project’s thumbnail image. This field can be ``null``.Max length: 255</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ThumbnailImageUrl { get; set; }
#nullable restore
#else
        public string ThumbnailImageUrl { get; set; }
#endif
        /// <summary>The time zone where the project is located. It must be a valid IANA time zone name from the `IANA Time Zone Database &lt;https://www.iana.org/time-zones&gt;`_ (e.g., ``America/New_York``). If no time zone is set, this field may be ``null``.Possible values: ``Pacific/Honolulu``, ``America/Juneau``, ``America/Los_Angeles``, ``America/Phoenix``, ``America/Denver``, ``America/Chicago``, ``America/New_York``, ``America/Indiana/Indianapolis``, ``Pacific/Pago_Pago``, ``Pacific/Midway``, ``America/Tijuana``, ``America/Chihuahua``, ``America/Mazatlan``, ``America/Guatemala``, ``America/Mexico_City``, ``America/Monterrey``, ``America/Regina``, ``America/Bogota``, ``America/Lima``, ``America/Caracas``, ``America/Halifax``, ``America/Guyana``, ``America/La_Paz``, ``America/Santiago``, ``America/St_Johns``, ``America/Sao_Paulo``, ``America/Argentina/Buenos_Aires``, ``America/Godthab``, ``Atlantic/South_Georgia``, ``Atlantic/Azores``, ``Atlantic/Cape_Verde``, ``Africa/Casablanca``, ``Europe/Dublin``, ``Europe/Lisbon``, ``Europe/London``, ``Africa/Monrovia``, ``Etc/UTC``, ``Europe/Amsterdam``, ``Europe/Belgrade``, ``Europe/Berlin``, ``Europe/Bratislava``, ``Europe/Brussels``, ``Europe/Budapest``, ``Europe/Copenhagen``, ``Europe/Ljubljana``, ``Europe/Madrid``, ``Europe/Paris``, ``Europe/Prague``, ``Europe/Rome``, ``Europe/Sarajevo``, ``Europe/Skopje``, ``Europe/Stockholm``, ``Europe/Vienna``, ``Europe/Warsaw``, ``Africa/Algiers``, ``Europe/Zagreb``, ``Europe/Athens``, ``Europe/Bucharest``, ``Africa/Cairo``, ``Africa/Harare``, ``Europe/Helsinki``, ``Europe/Istanbul``, ``Asia/Jerusalem``, ``Europe/Kiev``, ``Africa/Johannesburg``, ``Europe/Riga``, ``Europe/Sofia``, ``Europe/Tallinn``, ``Europe/Vilnius``, ``Asia/Baghdad``, ``Asia/Kuwait``, ``Europe/Minsk``, ``Africa/Nairobi``, ``Asia/Riyadh``, ``Asia/Tehran``, ``Asia/Muscat``, ``Asia/Baku``, ``Europe/Moscow``, ``Asia/Tbilisi``, ``Asia/Yerevan``, ``Asia/Kabul``, ``Asia/Karachi``, ``Asia/Tashkent``, ``Asia/Kolkata``, ``Asia/Colombo``, ``Asia/Kathmandu``, ``Asia/Almaty``, ``Asia/Dhaka``, ``Asia/Yekaterinburg``, ``Asia/Rangoon``, ``Asia/Bangkok``, ``Asia/Jakarta``, ``Asia/Novosibirsk``, ``Asia/Shanghai``, ``Asia/Chongqing``, ``Asia/Hong_Kong``, ``Asia/Krasnoyarsk``, ``Asia/Kuala_Lumpur``, ``Australia/Perth``, ``Asia/Singapore``, ``Asia/Taipei``, ``Asia/Ulaanbaatar``, ``Asia/Urumqi``, ``Asia/Irkutsk``, ``Asia/Tokyo``, ``Asia/Seoul``, ``Australia/Adelaide``, ``Australia/Darwin``, ``Australia/Brisbane``, ``Australia/Melbourne``, ``Pacific/Guam``, ``Australia/Hobart``, ``Pacific/Port_Moresby``, ``Australia/Sydney``, ``Asia/Yakutsk``, ``Pacific/Noumea``, ``Asia/Vladivostok``, ``Pacific/Auckland``, ``Pacific/Fiji``, ``Asia/Kamchatka``, ``Asia/Magadan``, ``Pacific/Majuro``, ``Pacific/Guadalcanal``, ``Pacific/Tongatapu``, ``Pacific/Apia``, ``Pacific/Fakaofo``</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Timezone { get; set; }
#nullable restore
#else
        public string Timezone { get; set; }
#endif
        /// <summary>The type of the project. Any value is accepted, but the following are recommended:Possible values: ``Convention Center``, ``Data Center``, ``Hotel / Motel``, ``Office``, ``Parking Structure / Garage``, ``Performing Arts``, ``Restaurant``, ``Retail``, ``Stadium / Arena``, ``Theme Park``, ``Warehouse (non-manufacturing)``, ``Assisted Living / Nursing Home``, ``Hospital``, ``Medical Laboratory``, ``Medical Office``, ``OutPatient Surgery Center``, ``Court House``, ``Dormitory``, ``Education Facility``, ``Government Building``, ``Library``, ``Military Facility``, ``Museum``, ``Prison / Correctional Facility``, ``Recreation Building``, ``Religious Building``, ``Research Facility / Laboratory``, ``Multi-Family Housing``, ``Single-Family Housing``, ``Airport``, ``Bridge``, ``Canal / Waterway``, ``Dams / Flood Control / Reservoirs``, ``Harbor / River Development``, ``Rail``, ``Seaport``, ``Streets / Roads / Highways``, ``Transportation Building``, ``Tunnel``, ``Waste Water / Sewers``, ``Water Supply``, ``Manufacturing / Factory``, ``Mining Facility``, ``Oil &amp; Gas``, ``Plant``, ``Power Plant``, ``Solar Farm``, ``Utilities``, ``Wind Farm``, ``Demonstration Project``, ``Template Project`` and ``Training Project``.Max length: 255</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>The timestamp when the project was last updated, in ISO 8601 format. This reflects changes to project fields but not updates to resources within the project.</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Users.Item.Projects.ProjectsGetResponse_results"/> and sets the default values.
        /// </summary>
        public ProjectsGetResponse_results()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Users.Item.Projects.ProjectsGetResponse_results"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Users.Item.Projects.ProjectsGetResponse_results CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Users.Item.Projects.ProjectsGetResponse_results();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accessLevels", n => { AccessLevels = n.GetObjectValue<global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Users.Item.Projects.ProjectsGetResponse_results_accessLevels>(global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Users.Item.Projects.ProjectsGetResponse_results_accessLevels.CreateFromDiscriminatorValue); } },
                { "accountId", n => { AccountId = n.GetGuidValue(); } },
                { "addressLine1", n => { AddressLine1 = n.GetStringValue(); } },
                { "addressLine2", n => { AddressLine2 = n.GetStringValue(); } },
                { "city", n => { City = n.GetStringValue(); } },
                { "classification", n => { Classification = n.GetEnumValue<global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Users.Item.Projects.ProjectsGetResponse_results_classification>(); } },
                { "constructionType", n => { ConstructionType = n.GetStringValue(); } },
                { "contractType", n => { ContractType = n.GetStringValue(); } },
                { "country", n => { Country = n.GetStringValue(); } },
                { "createdAt", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "currentPhase", n => { CurrentPhase = n.GetStringValue(); } },
                { "deliveryMethod", n => { DeliveryMethod = n.GetStringValue(); } },
                { "endDate", n => { EndDate = n.GetStringValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "imageUrl", n => { ImageUrl = n.GetStringValue(); } },
                { "jobNumber", n => { JobNumber = n.GetStringValue(); } },
                { "latitude", n => { Latitude = n.GetStringValue(); } },
                { "longitude", n => { Longitude = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "platform", n => { Platform = n.GetEnumValue<global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Users.Item.Projects.ProjectsGetResponse_results_platform>(); } },
                { "postalCode", n => { PostalCode = n.GetStringValue(); } },
                { "projectValue", n => { ProjectValue = n.GetObjectValue<global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Users.Item.Projects.ProjectsGetResponse_results_projectValue>(global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Users.Item.Projects.ProjectsGetResponse_results_projectValue.CreateFromDiscriminatorValue); } },
                { "sheetCount", n => { SheetCount = n.GetIntValue(); } },
                { "startDate", n => { StartDate = n.GetStringValue(); } },
                { "stateOrProvince", n => { StateOrProvince = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Users.Item.Projects.ProjectsGetResponse_results_status>(); } },
                { "thumbnailImageUrl", n => { ThumbnailImageUrl = n.GetStringValue(); } },
                { "timezone", n => { Timezone = n.GetStringValue(); } },
                { "type", n => { Type = n.GetStringValue(); } },
                { "updatedAt", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Users.Item.Projects.ProjectsGetResponse_results_accessLevels>("accessLevels", AccessLevels);
            writer.WriteGuidValue("accountId", AccountId);
            writer.WriteStringValue("addressLine1", AddressLine1);
            writer.WriteStringValue("addressLine2", AddressLine2);
            writer.WriteStringValue("city", City);
            writer.WriteEnumValue<global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Users.Item.Projects.ProjectsGetResponse_results_classification>("classification", Classification);
            writer.WriteStringValue("constructionType", ConstructionType);
            writer.WriteStringValue("contractType", ContractType);
            writer.WriteStringValue("country", Country);
            writer.WriteDateTimeOffsetValue("createdAt", CreatedAt);
            writer.WriteStringValue("currentPhase", CurrentPhase);
            writer.WriteStringValue("deliveryMethod", DeliveryMethod);
            writer.WriteStringValue("endDate", EndDate);
            writer.WriteGuidValue("id", Id);
            writer.WriteStringValue("imageUrl", ImageUrl);
            writer.WriteStringValue("jobNumber", JobNumber);
            writer.WriteStringValue("latitude", Latitude);
            writer.WriteStringValue("longitude", Longitude);
            writer.WriteStringValue("name", Name);
            writer.WriteEnumValue<global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Users.Item.Projects.ProjectsGetResponse_results_platform>("platform", Platform);
            writer.WriteStringValue("postalCode", PostalCode);
            writer.WriteObjectValue<global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Users.Item.Projects.ProjectsGetResponse_results_projectValue>("projectValue", ProjectValue);
            writer.WriteIntValue("sheetCount", SheetCount);
            writer.WriteStringValue("startDate", StartDate);
            writer.WriteStringValue("stateOrProvince", StateOrProvince);
            writer.WriteEnumValue<global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Accounts.Item.Users.Item.Projects.ProjectsGetResponse_results_status>("status", Status);
            writer.WriteStringValue("thumbnailImageUrl", ThumbnailImageUrl);
            writer.WriteStringValue("timezone", Timezone);
            writer.WriteStringValue("type", Type);
            writer.WriteDateTimeOffsetValue("updatedAt", UpdatedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
