// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Projects.Item.Users.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithUserPatchResponse_products : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The user&apos;s type of access to the product identified by ``key``. Possible values:- ``administrator``- ``member``- ``none``Note that when you&apos;re using a POST or PATCH endpoint to set this value, you must adhere to the following guidelines:- If you set a product&apos;s ``key`` to ``projectAdministration`` and you set ``access`` to ``none``, all other products should be set to ``member`` access for the user.- If you set a product&apos;s ``key`` to ``projectAdministration`` and you set ``access`` to ``administrator``, all other products should be set to ``administrator`` access for the user.- You cannot set a product&apos;s ``key`` to ``projectAdministration`` and set ``access`` to ``member``.</summary>
        public global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Projects.Item.Users.Item.WithUserPatchResponse_products_access? Access { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A machine-readable identifier for the product (e.g., docs, build).Each product has a unique key used throughout the API for identification, filtering, and integration logic (e.g., in query parameters like ``filter[key]``).Possible values:ACC - ``autoSpecs``, ``build``, ``cost``, ``designCollaboration``, ``docs``, ``insight``, ``modelCoordination``, ``projectAdministration``, and ``takeoff``.BIM 360 - ``assets``, ``costManagement``, ``designCollaboration``, ``documentManagement``, ``field``, ``fieldManagement``, ``glue``, ``insight``, ``modelCoordination``, ``plan``, ``projectAdministration``, ``projectHome``, ``projectManagement``, and ``quantification``.Note that this endpoint returns only ACC products. Other endpoints, such as `GET projects &lt;/en/docs/acc/v1/reference/http/admin-accountsaccountidprojects-GET/&gt;`_ and `GET projects/:projectId &lt;/en/docs/acc/v1/reference/http/admin-projects-projectId-GET/&gt;`_, may return both ACC and BIM 360 projects. In those responses, product keys may include BIM 360 values.</summary>
        public global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Projects.Item.Users.Item.WithUserPatchResponse_products_key? Key { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Projects.Item.Users.Item.WithUserPatchResponse_products"/> and sets the default values.
        /// </summary>
        public WithUserPatchResponse_products()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Projects.Item.Users.Item.WithUserPatchResponse_products"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Projects.Item.Users.Item.WithUserPatchResponse_products CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Projects.Item.Users.Item.WithUserPatchResponse_products();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "access", n => { Access = n.GetEnumValue<global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Projects.Item.Users.Item.WithUserPatchResponse_products_access>(); } },
                { "key", n => { Key = n.GetEnumValue<global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Projects.Item.Users.Item.WithUserPatchResponse_products_key>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Projects.Item.Users.Item.WithUserPatchResponse_products_access>("access", Access);
            writer.WriteEnumValue<global::Autodesk.ACC.AccountAdmin.Construction.Admin.V1.Projects.Item.Users.Item.WithUserPatchResponse_products_key>("key", Key);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
