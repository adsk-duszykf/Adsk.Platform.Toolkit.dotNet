// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Autodesk.ACC.AccountAdmin.ACC.Construction.Admin.V1.Accounts.Item.Projects
{
    /// <summary>
    /// Information about a project in the current user&apos;s account that is configured as a template from which to copy products and settings when creating a new project:- If you *include* this object in a `POST accounts/:accountId/projects &lt;/en/docs/acc/v1/reference/http/admin-accountsaccountidprojects-POST/&gt;`_ request, the cloned project&apos;s products and settings will match those of the template project.- If you *omit* this object from a `POST accounts/:accountId/projects &lt;/en/docs/acc/v1/reference/http/admin-accountsaccountidprojects-POST/&gt;`_ request, all of the current ACC account&apos;s products are added to the cloned project and activated.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ProjectsPostRequestBody_template : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Information about what to include when cloning a project template.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Autodesk.ACC.AccountAdmin.ACC.Construction.Admin.V1.Accounts.Item.Projects.ProjectsPostRequestBody_template_options? Options { get; set; }
#nullable restore
#else
        public global::Autodesk.ACC.AccountAdmin.ACC.Construction.Admin.V1.Accounts.Item.Projects.ProjectsPostRequestBody_template_options Options { get; set; }
#endif
        /// <summary>The ID of a project template in the current ACC account from which to clone the new project and copy products and settings.Note that you cannot create a project template from another project template, but you can base it on a production project. Set this field to the project ``id`` of the production project. The new project template is not completely configured for use, but it will get you started.For more information about project templates, see `Project Templates &lt;https://help.autodesk.com/view/BUILD/ENU/?guid=Account_Admin_Project_Templates&gt;`_ in the Build help.</summary>
        public Guid? ProjectId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Autodesk.ACC.AccountAdmin.ACC.Construction.Admin.V1.Accounts.Item.Projects.ProjectsPostRequestBody_template"/> and sets the default values.
        /// </summary>
        public ProjectsPostRequestBody_template()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Autodesk.ACC.AccountAdmin.ACC.Construction.Admin.V1.Accounts.Item.Projects.ProjectsPostRequestBody_template"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Autodesk.ACC.AccountAdmin.ACC.Construction.Admin.V1.Accounts.Item.Projects.ProjectsPostRequestBody_template CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Autodesk.ACC.AccountAdmin.ACC.Construction.Admin.V1.Accounts.Item.Projects.ProjectsPostRequestBody_template();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "options", n => { Options = n.GetObjectValue<global::Autodesk.ACC.AccountAdmin.ACC.Construction.Admin.V1.Accounts.Item.Projects.ProjectsPostRequestBody_template_options>(global::Autodesk.ACC.AccountAdmin.ACC.Construction.Admin.V1.Accounts.Item.Projects.ProjectsPostRequestBody_template_options.CreateFromDiscriminatorValue); } },
                { "projectId", n => { ProjectId = n.GetGuidValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Autodesk.ACC.AccountAdmin.ACC.Construction.Admin.V1.Accounts.Item.Projects.ProjectsPostRequestBody_template_options>("options", Options);
            writer.WriteGuidValue("projectId", ProjectId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
